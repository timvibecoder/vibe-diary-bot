import os
import logging
from datetime import datetime, time, timedelta
import sqlite3
from dotenv import load_dotenv
from telegram import Update, Message, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler, CallbackQueryHandler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
WAITING_FOR_NOTE = 1
WAITING_FOR_TRANSFER_AMOUNT = 2
WAITING_FOR_TRANSFER_TARGET = 3

# –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
ACHIEVEMENTS = {
    'first_vibe': {
        'name': '–ü–µ—Ä–≤—ã–π –≤–∞–π–±',
        'description': '–ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –≤–∞–π–±',
        'emoji': 'üéØ',
        'reward': 5
    },
    'vibe_master': {
        'name': '–ú–∞—Å—Ç–µ—Ä –≤–∞–π–±–∞',
        'description': '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —É—Ä–æ–≤–Ω—è "–°—É–ø–µ—Ä–∑–≤–µ–∑–¥–∞"',
        'emoji': 'üèÜ',
        'reward': 20
    },
    'social_butterfly': {
        'name': '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞',
        'description': '–ü–µ—Ä–µ–¥–∞–π—Ç–µ –≤–∞–π–± 5 —Ä–∞–∑–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
        'emoji': 'ü¶ã',
        'reward': 15
    },
    'daily_streak': {
        'name': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—Ç—Ä–∏–∫',
        'description': '–ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
        'emoji': 'üî•',
        'reward': 25
    },
    'note_taker': {
        'name': '–ó–∞–º–µ—Ç–æ—á–Ω–∏–∫',
        'description': '–î–æ–±–∞–≤—å—Ç–µ 10 –∑–∞–º–µ—Ç–æ–∫ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤–∞–π–±–∞',
        'emoji': 'üìù',
        'reward': 10
    }
}

# –£—Ä–æ–≤–Ω–∏ –≤–∞–π–±–∞
VIBE_LEVELS = {
    0: {"name": "–ù–∞—á–∏–Ω–∞—é—â–∏–π", "emoji": "üå±", "required_vibe": 0},
    1: {"name": "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π", "emoji": "‚≠ê", "required_vibe": 10},
    2: {"name": "–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π", "emoji": "üåü", "required_vibe": 25},
    3: {"name": "–í–∞–π–±–æ–≤—ã–π", "emoji": "‚ú®", "required_vibe": 50},
    4: {"name": "–°—É–ø–µ—Ä–∑–≤–µ–∑–¥–∞", "emoji": "üå†", "required_vibe": 100},
    5: {"name": "–õ–µ–≥–µ–Ω–¥–∞", "emoji": "üëë", "required_vibe": 200}
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('vibe_tracker.db')
        c = conn.cursor()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–π–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        c.execute('''
            CREATE TABLE IF NOT EXISTS user_vibes
            (user_id INTEGER,
             chat_id INTEGER,
             username TEXT,
             vibe_score INTEGER DEFAULT 0,
             last_update TIMESTAMP,
             last_daily_bonus TIMESTAMP,
             daily_streak INTEGER DEFAULT 0,
             PRIMARY KEY (user_id, chat_id))
        ''')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        c.execute('''
            CREATE TABLE IF NOT EXISTS vibe_history
            (id INTEGER PRIMARY KEY AUTOINCREMENT,
             user_id INTEGER,
             chat_id INTEGER,
             change_amount INTEGER,
             note TEXT,
             timestamp TIMESTAMP,
             FOREIGN KEY (user_id, chat_id) REFERENCES user_vibes(user_id, chat_id))
        ''')
        
        # –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        c.execute('''
            CREATE TABLE IF NOT EXISTS achievements
            (user_id INTEGER,
             chat_id INTEGER,
             achievement_id TEXT,
             achieved_at TIMESTAMP,
             PRIMARY KEY (user_id, chat_id, achievement_id),
             FOREIGN KEY (user_id, chat_id) REFERENCES user_vibes(user_id, chat_id))
        ''')
        
        c.execute('''
            CREATE TABLE IF NOT EXISTS vibe_transfers
            (id INTEGER PRIMARY KEY AUTOINCREMENT,
             from_user_id INTEGER,
             to_user_id INTEGER,
             chat_id INTEGER,
             amount INTEGER,
             timestamp TIMESTAMP,
             FOREIGN KEY (from_user_id, chat_id) REFERENCES user_vibes(user_id, chat_id),
             FOREIGN KEY (to_user_id, chat_id) REFERENCES user_vibes(user_id, chat_id))
        ''')
        
        conn.commit()
        logging.info("Database initialized successfully")
    except Exception as e:
        logging.error(f"Error initializing database: {e}")
        raise
    finally:
        if 'conn' in locals():
            conn.close()

def get_level_info(vibe_score):
    current_level = 0
    for level, info in sorted(VIBE_LEVELS.items(), reverse=True):
        if vibe_score >= info["required_vibe"]:
            current_level = level
            break
    
    current_info = VIBE_LEVELS[current_level]
    next_level = current_level + 1
    
    if next_level in VIBE_LEVELS:
        next_info = VIBE_LEVELS[next_level]
        progress = (vibe_score - current_info["required_vibe"]) / (next_info["required_vibe"] - current_info["required_vibe"]) * 100
        progress = min(100, max(0, progress))
        return current_info, next_info, progress
    
    return current_info, None, 100

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞–π–±–∞.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/plusvibe - –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–π–± (–º–æ–∂–Ω–æ —Å –∑–∞–º–µ—Ç–∫–æ–π)\n"
        "/minusvibe - —É–º–µ–Ω—å—à–∏—Ç—å –≤–∞–π–± (–º–æ–∂–Ω–æ —Å –∑–∞–º–µ—Ç–∫–æ–π)\n"
        "/myvibe - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–∞–π–±\n"
        "/topvibe - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–∞–π–±—É\n"
        "/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∞–π–±–∞\n"
        "/levels - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω—è—Ö –≤–∞–π–±–∞\n"
        "/transfer - –ø–µ—Ä–µ–¥–∞—Ç—å –≤–∞–π–± –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "/achievements - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "/daily - –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–π–±–∞
async def plus_vibe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    username = update.message.from_user.username or update.message.from_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ
    args = context.args
    amount = 1
    if args:
        try:
            amount = int(args[0])
            if amount <= 0:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
                return
            if amount > 100:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                await update.message.reply_text("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 100")
                return
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    context.user_data['vibe_change'] = {'amount': amount, 'user_id': user_id, 'chat_id': chat_id, 'username': username}
    
    keyboard = [
        [
            InlineKeyboardButton("–ë–µ–∑ –∑–∞–º–µ—Ç–∫–∏", callback_data='no_note'),
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data='add_note')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –≤–∞–π–±–∞ (+{amount})?",
        reply_markup=reply_markup
    )

# –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤–∞–π–±–∞
async def minus_vibe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    username = update.message.from_user.username or update.message.from_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ
    args = context.args
    amount = 1
    if args:
        try:
            amount = int(args[0])
            if amount <= 0:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
                return
            if amount > 100:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                await update.message.reply_text("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 100")
                return
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    context.user_data['vibe_change'] = {'amount': -amount, 'user_id': user_id, 'chat_id': chat_id, 'username': username}
    
    keyboard = [
        [
            InlineKeyboardButton("–ë–µ–∑ –∑–∞–º–µ—Ç–∫–∏", callback_data='no_note'),
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data='add_note')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –≤–∞–π–±–∞ (-{amount})?",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'no_note':
        await update_vibe(query, context, None)
    elif query.data == 'add_note':
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –≤–∞–π–±–∞:")
        return WAITING_FOR_NOTE

async def note_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    note = update.message.text
    await update_vibe(update, context, note)
    return ConversationHandler.END

async def update_vibe(update: Update, context: ContextTypes.DEFAULT_TYPE, note: str = None):
    vibe_change = context.user_data.get('vibe_change')
    if not vibe_change:
        if isinstance(update, Update):
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            await update.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    conn = sqlite3.connect('vibe_tracker.db')
    c = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–∞–π–±
        c.execute('SELECT vibe_score FROM user_vibes WHERE user_id = ? AND chat_id = ?',
                 (vibe_change['user_id'], vibe_change['chat_id']))
        result = c.fetchone()
        current_vibe = result[0] if result else 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç—ã
        new_vibe = current_vibe + vibe_change['amount']
        if new_vibe > 1000000:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–∞–π–±
            if isinstance(update, Update):
                await update.message.reply_text("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∞–π–±–∞ (1,000,000)")
            else:
                await update.edit_message_text("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∞–π–±–∞ (1,000,000)")
            return
        if new_vibe < -1000000:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∞–π–±
            if isinstance(update, Update):
                await update.message.reply_text("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∞–π–±–∞ (-1,000,000)")
            else:
                await update.edit_message_text("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∞–π–±–∞ (-1,000,000)")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–π–±
        c.execute('''
            INSERT INTO user_vibes (user_id, chat_id, username, vibe_score, last_update)
            VALUES (?, ?, ?, ?, ?)
            ON CONFLICT(user_id, chat_id) DO UPDATE SET
            vibe_score = ?,
            last_update = ?
        ''', (vibe_change['user_id'], vibe_change['chat_id'], vibe_change['username'], 
              new_vibe, datetime.now(), new_vibe, datetime.now()))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        c.execute('''
            INSERT INTO vibe_history (user_id, chat_id, change_amount, note, timestamp)
            VALUES (?, ?, ?, ?, ?)
        ''', (vibe_change['user_id'], vibe_change['chat_id'], vibe_change['amount'], note, datetime.now()))
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç
        c.execute('SELECT vibe_score FROM user_vibes WHERE user_id = ? AND chat_id = ?',
                  (vibe_change['user_id'], vibe_change['chat_id']))
        score = c.fetchone()[0]
        
        conn.commit()
        conn.close()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ
        current_level, next_level, progress = get_level_info(score)
        
        message = f"{'‚ú® –í–∞–π–± –ø–æ–≤—ã—à–µ–Ω' if vibe_change['amount'] > 0 else 'üòî –í–∞–π–± –ø–æ–Ω–∏–∂–µ–Ω'}!\n"
        message += f"–¢–µ–∫—É—â–∏–π –≤–∞–π–±: {score}\n"
        message += f"–£—Ä–æ–≤–µ–Ω—å: {current_level['emoji']} {current_level['name']}\n"
        
        if next_level:
            message += f"–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {progress:.1f}%"
        
        if note:
            message += f"\n–ó–∞–º–µ—Ç–∫–∞: {note}"
        
        if isinstance(update, Update):
            await update.message.reply_text(message)
        else:  # CallbackQuery
            await update.edit_message_text(message)
        
    except Exception as e:
        conn.rollback()
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∞–π–±–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"Error in update_vibe: {e}")
    
    finally:
        conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–µ–≥–æ –≤–∞–π–±–∞
async def my_vibe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    
    conn = sqlite3.connect('vibe_tracker.db')
    c = conn.cursor()
    
    c.execute('SELECT vibe_score FROM user_vibes WHERE user_id = ? AND chat_id = ?',
              (user_id, chat_id))
    result = c.fetchone()
    
    if result:
        score = result[0]
        current_level, next_level, progress = get_level_info(score)
        
        message = f"üåü –í–∞—à —Ç–µ–∫—É—â–∏–π –≤–∞–π–±: {score}\n"
        message += f"–£—Ä–æ–≤–µ–Ω—å: {current_level['emoji']} {current_level['name']}\n"
        
        if next_level:
            message += f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è ({next_level['emoji']} {next_level['name']}): {progress:.1f}%"
        
        await update.message.reply_text(message)
    else:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–π–±–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /plusvibe –∏–ª–∏ /minusvibe!")
    
    conn.close()

# –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–∞–π–±—É
async def top_vibe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    
    conn = sqlite3.connect('vibe_tracker.db')
    c = conn.cursor()
    
    c.execute('''
        SELECT username, vibe_score 
        FROM user_vibes 
        WHERE chat_id = ? 
        ORDER BY vibe_score DESC 
        LIMIT 10
    ''', (chat_id,))
    
    results = c.fetchall()
    conn.close()
    
    if not results:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–ª –≤–∞–π–± –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
        return
    
    message = "üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–∞–π–±—É:\n\n"
    for i, (username, score) in enumerate(results, 1):
        level_info = get_level_info(score)[0]
        message += f"{i}. {level_info['emoji']} {username}: {score}\n"
    
    await update.message.reply_text(message)

# –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∞–π–±–∞
async def vibe_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    
    conn = sqlite3.connect('vibe_tracker.db')
    c = conn.cursor()
    
    c.execute('''
        SELECT change_amount, note, timestamp
        FROM vibe_history
        WHERE user_id = ? AND chat_id = ?
        ORDER BY timestamp DESC
        LIMIT 10
    ''', (user_id, chat_id))
    
    results = c.fetchall()
    conn.close()
    
    if not results:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∞–π–±–∞!")
        return
    
    message = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞–π–±–∞:\n\n"
    for change_amount, note, timestamp in results:
        dt = datetime.fromisoformat(timestamp)
        emoji = "‚ú®" if change_amount > 0 else "üòî"
        message += f"{dt.strftime('%d.%m %H:%M')} {emoji} {change_amount:+d}"
        if note:
            message += f" - {note}"
        message += "\n"
    
    await update.message.reply_text(message)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω—è—Ö
async def levels_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = "üìä –£—Ä–æ–≤–Ω–∏ –≤–∞–π–±–∞:\n\n"
    for level, info in sorted(VIBE_LEVELS.items()):
        message += f"{info['emoji']} {info['name']}: –æ—Ç {info['required_vibe']} –≤–∞–π–±–∞\n"
    
    await update.message.reply_text(message)

# –ü–µ—Ä–µ–¥–∞—á–∞ –≤–∞–π–±–∞
async def transfer_vibe_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ –≤–∞–π–±–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)"
    )
    return WAITING_FOR_TRANSFER_AMOUNT

async def transfer_vibe_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = int(update.message.text)
        if amount <= 0:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return WAITING_FOR_TRANSFER_AMOUNT
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≤–∞–π–±–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = sqlite3.connect('vibe_tracker.db')
        c = conn.cursor()
        c.execute('SELECT vibe_score FROM user_vibes WHERE user_id = ? AND chat_id = ?',
                  (update.message.from_user.id, update.message.chat_id))
        result = c.fetchone()
        conn.close()
        
        if not result or result[0] < amount:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–π–±–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏!")
            return ConversationHandler.END
        
        context.user_data['transfer_amount'] = amount
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
            "–∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –≤–∞–π–±, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ @username"
        )
        return WAITING_FOR_TRANSFER_TARGET
        
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return WAITING_FOR_TRANSFER_AMOUNT

async def transfer_vibe_target(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amount = context.user_data.get('transfer_amount')
    if not amount:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—á—É –∑–∞–Ω–æ–≤–æ —Å /transfer")
        return ConversationHandler.END
    
    target_user = None
    if update.message.forward_from:
        target_user = update.message.forward_from
    elif update.message.text and update.message.text.startswith('@'):
        username = update.message.text[1:]
        conn = sqlite3.connect('vibe_tracker.db')
        c = conn.cursor()
        c.execute('SELECT user_id FROM user_vibes WHERE username = ? AND chat_id = ?',
                  (username, update.message.chat_id))
        result = c.fetchone()
        conn.close()
        
        if result:
            target_user = await context.bot.get_chat_member(update.message.chat_id, result[0])
            target_user = target_user.user
    
    if not target_user:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
            "–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π @username"
        )
        return WAITING_FOR_TRANSFER_TARGET
    
    if target_user.id == update.message.from_user.id:
        await update.message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –≤–∞–π–± —Å–∞–º–æ–º—É —Å–µ–±–µ!")
        return ConversationHandler.END
    
    await transfer_vibe(update, context, target_user, amount)
    return ConversationHandler.END

async def transfer_vibe(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user, amount):
    conn = sqlite3.connect('vibe_tracker.db')
    c = conn.cursor()
    
    try:
        # –°–Ω–∏–º–∞–µ–º –≤–∞–π–± —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        c.execute('''
            UPDATE user_vibes 
            SET vibe_score = vibe_score - ?
            WHERE user_id = ? AND chat_id = ?
        ''', (amount, update.message.from_user.id, update.message.chat_id))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–π–± –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        c.execute('''
            INSERT INTO user_vibes (user_id, chat_id, username, vibe_score, last_update)
            VALUES (?, ?, ?, ?, ?)
            ON CONFLICT(user_id, chat_id) DO UPDATE SET
            vibe_score = vibe_score + ?,
            last_update = ?
        ''', (target_user.id, update.message.chat_id, target_user.username or target_user.first_name,
              amount, datetime.now(), amount, datetime.now()))
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä
        c.execute('''
            INSERT INTO vibe_transfers (from_user_id, to_user_id, chat_id, amount, timestamp)
            VALUES (?, ?, ?, ?, ?)
        ''', (update.message.from_user.id, target_user.id, update.message.chat_id, amount, datetime.now()))
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ social_butterfly
        c.execute('''
            SELECT COUNT(DISTINCT to_user_id) 
            FROM vibe_transfers 
            WHERE from_user_id = ? AND chat_id = ?
        ''', (update.message.from_user.id, update.message.chat_id))
        
        unique_transfers = c.fetchone()[0]
        if unique_transfers >= 5:
            await check_and_grant_achievement(update, context, 'social_butterfly')
        
        await update.message.reply_text(
            f"‚ú® –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ {amount} –≤–∞–π–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "
            f"{target_user.username or target_user.first_name}!"
        )
        
    except Exception as e:
        conn.rollback()
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –≤–∞–π–±–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"Error in transfer_vibe: {e}")
    
    finally:
        conn.close()

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
async def daily_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id
        username = update.message.from_user.username or update.message.from_user.first_name
        now = datetime.now()
        
        conn = sqlite3.connect('vibe_tracker.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute('''
            INSERT OR IGNORE INTO user_vibes 
            (user_id, chat_id, username, vibe_score, last_update, last_daily_bonus, daily_streak)
            VALUES (?, ?, ?, 0, ?, NULL, 0)
        ''', (user_id, chat_id, username, now))
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute('''
            SELECT vibe_score, last_daily_bonus, daily_streak
            FROM user_vibes
            WHERE user_id = ? AND chat_id = ?
        ''', (user_id, chat_id))
        
        vibe_score, last_bonus_str, streak = c.fetchone()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
        if last_bonus_str:
            last_bonus = datetime.fromisoformat(last_bonus_str)
            time_since_last = now - last_bonus
            
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤
            if time_since_last < timedelta(days=1):
                time_left = timedelta(days=1) - time_since_last
                hours = int(time_left.total_seconds() // 3600)
                minutes = int((time_left.total_seconds() % 3600) // 60)
                await update.message.reply_text(
                    f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {hours} —á. {minutes} –º–∏–Ω."
                )
                conn.close()
                return
            
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 48 —á–∞—Å–æ–≤, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∏–∫
            if time_since_last > timedelta(days=2):
                streak = 0
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∏–∫ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å
        streak += 1
        bonus_amount = 5 + min(streak - 1, 5)  # –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å 5 + –¥–æ 5 –∑–∞ —Å—Ç—Ä–∏–∫
        new_vibe_score = vibe_score + bonus_amount
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        c.execute('''
            UPDATE user_vibes
            SET vibe_score = ?,
                last_daily_bonus = ?,
                daily_streak = ?,
                last_update = ?
            WHERE user_id = ? AND chat_id = ?
        ''', (new_vibe_score, now, streak, now, user_id, chat_id))
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        c.execute('''
            INSERT INTO vibe_history (user_id, chat_id, change_amount, note, timestamp)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, chat_id, bonus_amount, f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (—Å—Ç—Ä–∏–∫: {streak})", now))
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ daily_streak
        if streak >= 5:
            await check_and_grant_achievement(update, context, 'daily_streak')
        
        message = f"üéÅ –ü–æ–ª—É—á–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +{bonus_amount} –≤–∞–π–±–∞!\n"
        message += f"üî• –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {streak} –¥–Ω–µ–π\n"
        message += f"üí´ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_vibe_score} –≤–∞–π–±–∞"
        
        await update.message.reply_text(message)
        
    except Exception as e:
        logging.error(f"Error in daily_bonus: {str(e)}")
        logging.exception("Full error traceback:")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    finally:
        if 'conn' in locals():
            conn.close()

# –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
async def check_and_grant_achievement(update: Update, context: ContextTypes.DEFAULT_TYPE, achievement_id: str):
    if achievement_id not in ACHIEVEMENTS:
        return
    
    conn = sqlite3.connect('vibe_tracker.db')
    c = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –ª–∏ —É–∂–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        c.execute('''
            SELECT 1 FROM achievements
            WHERE user_id = ? AND chat_id = ? AND achievement_id = ?
        ''', (update.message.from_user.id, update.message.chat_id, achievement_id))
        
        if c.fetchone():
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        c.execute('''
            INSERT INTO achievements (user_id, chat_id, achievement_id, achieved_at)
            VALUES (?, ?, ?, ?)
        ''', (update.message.from_user.id, update.message.chat_id, achievement_id, datetime.now()))
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        achievement = ACHIEVEMENTS[achievement_id]
        c.execute('''
            UPDATE user_vibes
            SET vibe_score = vibe_score + ?
            WHERE user_id = ? AND chat_id = ?
        ''', (achievement['reward'], update.message.from_user.id, update.message.chat_id))
        
        conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message = f"üéâ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n\n"
        message += f"{achievement['emoji']} {achievement['name']}\n"
        message += f"üìù {achievement['description']}\n"
        message += f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: +{achievement['reward']} –≤–∞–π–±–∞"
        
        await update.message.reply_text(message)
        
    except Exception as e:
        conn.rollback()
        logging.error(f"Error in check_and_grant_achievement: {e}")
    
    finally:
        conn.close()

async def show_achievements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    
    conn = sqlite3.connect('vibe_tracker.db')
    c = conn.cursor()
    
    try:
        c.execute('''
            SELECT achievement_id, achieved_at
            FROM achievements
            WHERE user_id = ? AND chat_id = ?
        ''', (user_id, chat_id))
        
        achieved = {row[0]: row[1] for row in c.fetchall()}
        
        message = "üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"
        
        for achievement_id, achievement in ACHIEVEMENTS.items():
            if achievement_id in achieved:
                dt = datetime.fromisoformat(achieved[achievement_id])
                message += f"{achievement['emoji']} {achievement['name']} - ‚úÖ {dt.strftime('%d.%m.%Y')}\n"
                message += f"‚îî {achievement['description']}\n"
            else:
                message += f"‚ùå {achievement['name']}\n"
                message += f"‚îî {achievement['description']}\n"
            message += "\n"
        
        await update.message.reply_text(message)
        
    except Exception as e:
        logging.error(f"Error in show_achievements: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    finally:
        conn.close()

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
    note_conv_handler = ConversationHandler(
        entry_points=[],  # –ü—É—Å—Ç—ã–µ entry_points, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º callback
        states={
            WAITING_FOR_NOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, note_handler)]
        },
        fallbacks=[CommandHandler('cancel', lambda u, c: ConversationHandler.END)]
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤–∞–π–±–∞
    transfer_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('transfer', transfer_vibe_start)],
        states={
            WAITING_FOR_TRANSFER_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, transfer_vibe_amount)],
            WAITING_FOR_TRANSFER_TARGET: [MessageHandler(filters.TEXT | filters.FORWARDED, transfer_vibe_target)]
        },
        fallbacks=[CommandHandler('cancel', lambda u, c: ConversationHandler.END)]
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    application.add_handler(CommandHandler("plusvibe", plus_vibe))
    application.add_handler(CommandHandler("minusvibe", minus_vibe))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(note_conv_handler)
    application.add_handler(transfer_conv_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("myvibe", my_vibe))
    application.add_handler(CommandHandler("topvibe", top_vibe))
    application.add_handler(CommandHandler("history", vibe_history))
    application.add_handler(CommandHandler("levels", levels_info))
    application.add_handler(CommandHandler("daily", daily_bonus))
    application.add_handler(CommandHandler("achievements", show_achievements))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main() 